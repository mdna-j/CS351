let AssertEquality a b = if a<>b then printfn "Fail!" else printfn "Test Success!"
//Completed example:
let expected_value = 1 + 1
let actual_value = 2
printf "Q0..."
AssertEquality expected_value actual_value

// Q1
let expected_value1 = 5 + 6
let actual_value1 = 11
printf "Q1 ..."
AssertEquality expected_value1 actual_value1

// Q2
let myvar = 40
let newvar = myvar * 2
printf "Q2 ..."
AssertEquality newvar 80

// Q3
let add a b = a + b
let res1 = add 3 6
let res2 = add 4 3
printf "Q3-1 ..."
AssertEquality res1 9
printf "Q3-2 ..."
AssertEquality res2 7

let addTwice x y = add (add x y) (add x y)
let restotal = addTwice 2 3
printf "Q3-3 ..."
AssertEquality restotal 10

// Q4
let mystr = "Koans are puzzles."
let newstr = mystr
printf "Q4 ..."
AssertEquality mystr newstr

// Q5
let mystr5 = "Koans are puzzles."
let replaceEtoY (text: string) = text.Replace("e", "Y")
let newstr5 = replaceEtoY mystr5
printf "Q5-1 ..."
AssertEquality newstr5 "Koans arY puzzlYs."

let replaceAEtoY (text: string) = replaceEtoY(text.Replace("a", "Y"))
let finalstr = replaceAEtoY mystr5
printf "Q5-2 ..."
AssertEquality finalstr "KoYns YrY puzzlYs."

// Q6
let addTwice2 x y =
    let add2 a b = a + b
    add2 (add2 x y) (add2 x y)
let res = addTwice2 3 4
printf "Q6 ..."
AssertEquality res 14

// Q7
let mystr7 = "Q7 Koans are puzzles."
let replaceAEtoY7 (text: string) =
    let replaceEtoY7 (text: string) = text.Replace("e", "Y")
    replaceEtoY7 (text.Replace("a", "Y"))
let res7 = replaceAEtoY7 mystr7
printf "Q7 ..."
AssertEquality res7 "Q7 KoYns YrY puzzlYs."

// Q8
let add2var x y = x + y
let addOneByOne x =
    let addHelper y = x + y
    addHelper
let res91 = add2var 5 6
let intermediateFn = addOneByOne 5
let res92 = intermediateFn 6
printf "Q8 ..."
AssertEquality res91 res92

// Q9
let func1 x1 n = x1 + n
let func2 n = fun x -> x + n
let Q9res1 = func1 2 3
let Q9res2 = func2 3 2
printf "Q9 ..."
AssertEquality Q9res1 Q9res2

// Q10
let addTwoNumbers x y =
    let add n = fun x -> x + n
    x |> add y
let Q10Sum2 = addTwoNumbers 6 7
printf "Q10 ..."
AssertEquality Q10Sum2 13

// Q11
let addThreeNumbers x y z =
    let add11 n = fun x -> x + n
    x |> add11 y |> add11 z
let Q11Sum3 = addThreeNumbers 5 6 7
printf "Q11 ..."
AssertEquality Q11Sum3 18

// Q12
let add12 y = fun x -> x + y
let addThreeNumShort x y z = x |> add12 y |> add12 z
let Sum3Short = addThreeNumShort 5 6 7
printf "Q12 ..."
AssertEquality Q11Sum3 Sum3Short

// Q13
let addQ13 a b = a + b
let addThreeNumQ13 x y z = addQ13 (addQ13 x y) z
let Sum3Q13 = addThreeNumQ13 5 6 7
printf "Q13 ..."
AssertEquality Sum3Q13 Sum3Short

// Q14
let testEqualNew inputTuple =
    match inputTuple with
    | (a, b) when a = b -> printfn "Test Success!"
    | _ -> printf "Fail"
    
printf "Q14-1 ..."
testEqualNew (10, 10)

// Q15
let testEqual3 (a, b, c) = 
    match (a = b, b = c) with
    | (true, true) -> printfn "Test Success!"
    | _ -> printfn "Fail"
printf "Q15 ..."
testEqual3 (2, 2, 2)

// Q16
let lis = [1; 2; 3; 4; 5]
let myLast1 lis = lis |> List.tail
let tail1 = myLast1 lis
printf "Q16 ..."
AssertEquality tail1 [2; 3; 4; 5]

// Q17
let myLast3 lis = lis |> List.rev |> List.head
let tail3 = myLast3 lis
printf "Q17 ..."
AssertEquality tail3 5